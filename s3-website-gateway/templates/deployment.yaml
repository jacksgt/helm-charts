apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "s3-website-gateway.fullname" . }}
  labels:
    {{- include "s3-website-gateway.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "s3-website-gateway.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "s3-website-gateway.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "s3-website-gateway.fullname" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: nginx
          command: ["nginx", "-g", "daemon off;"]
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_/healthz
              port: http
          readinessProbe:
            httpGet:
              path: /_/healthz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/
              readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
        - name: config-reload
          command:
            - sh
            - -c
            - |
              set -e
              mkdir /tmp/logs /tmp/vector
              touch /tmp/last-reload-timestamp
              while sleep "${CONFIG_RELOAD_INTERVAL}"; do
                updated_configs=$(find /etc/nginx/conf.d/ -type f -newer /tmp/last-reload-timestamp)
                if [ $(echo -n "${updated_configs}" | wc -l) -gt 0 ]; then
                  echo "[$(date --rfc-3339=s)] Detected updated configuration files:"
                  echo "${updated_configs}"
                  echo "Validating nginx configuration ..."
                  nginx -t
                  echo "Reloading nginx ..."
                  nginx -s reload
                  echo "OK"
                  touch /tmp/last-reload-timestamp
                fi
              done
          env:
            - name: CONFIG_RELOAD_INTERVAL
              value: {{ .Values.configReloadInterval | quote }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/
              readOnly: true
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          resources:
            requests:
              memory: 1Mi
              cpu: 1m
            limits:
              memory: 10Mi
              cpu: 10m
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          terminationMessagePolicy: FallbackToLogsOnError

        - name: log-rotate
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          # the following command resets the log file once per hour
          command:
          - sh
          - -xc
          - 'while sleep ${LOG_ROTATE_INTERVAL}; do rm -f /tmp/logs/access.log; nginx -s reload; done'
          volumeMounts:
          - name: tmp
            mountPath: /tmp
          env:
          - name: LOG_ROTATE_INTERVAL
            value: {{ .Values.logRotateInterval | quote }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          resources:
            requests:
              memory: 1Mi
              cpu: 1m
            limits:
              memory: 10Mi
              cpu: 10m
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          terminationMessagePolicy: FallbackToLogsOnError

        {{- if .Values.logCollector.enabled }}
        - name: vector
          image: {{ .Values.logCollector.image }}
          env:
            - name: VECTOR_CONFIG_DIR
              value: /etc/vector
            # currently somewhat broken on k8s, see https://github.com/vectordotdev/vector/issues/15514
            - name: VECTOR_WATCH_CONFIG
              value: "false"
          volumeMounts:
          - name: vector-config
            mountPath: /etc/vector
            readOnly: true
          - name: tmp
            mountPath: /tmp
            readOnly: false
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          terminationMessagePolicy: FallbackToLogsOnError
          # TODO: add livenessProbe for vector
        {{- end }}

      # required for sending signals between pods
      shareProcessNamespace: true

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      enableServiceLinks: false
      volumes:
        - name: tmp
          emptyDir: {}
        - name: nginx-config
          configMap:
            name: {{ include "s3-website-gateway.fullname" . }}-nginx-config
        {{- if .Values.logCollector.enabled }}
        - name: vector-config
          secret:
            secretName: {{ include "s3-website-gateway.fullname" . }}-vector-config
        {{- end }}
